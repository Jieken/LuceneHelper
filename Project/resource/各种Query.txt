/*****************************
 * 
 * //各种query
	/***
 *1、 MatchAllDocsQuery(匹配所有)
 * 
 *2、TermQuery(Term t)(按词条搜索)
 *
 *      Query query = null;
		query=new TermQuery(new Term("name","word1 a and"));
		hits=searcher.search(query);// 查找 name:word1 a and 共0个结果
		System.out.println("查找 "+query.toString()+" 共" + hits.length() + "个结果");
 * 
 *
 *3、RangeQuery(在某一范围内搜索)
 *
 *      Term beginTime=new Term("time","200001");
		Term endTime=new Term("time","200005");
		RangeQuery query=null;
		query=new RangeQuery(beginTime,endTime,false);//不包含边界值
 * 
 *  NumericRangeQuery(时间和整形都是通过NumericRangeQuery来实现)
 *  NumericRangeQuery<long> query = NumericRangeQuery.NewLongRange("ID", 0, 10000000, true, true);
 *  
 *  TermRangeQuery("yyyy-MM-dd")对日期进行搜索
 *  Query query = new TermRangeQuery("createtime", mindate, maxdate, true, true);  
 * 
 * 
 *4、BooleanQuery(按“与或”搜索)
 * 
 *      .和： MUST与MUST_NOT
		.或： SHOULD与SHOULD
		.A与B的并集－B  MUST与MUST_NOT
		.SHOULD表示条件关系为“or”,BooleanClause.Occur.MUST表示“and”,BooleanClause.Occur.MUST_NOT表示“not”
		Query query1=null;
		Query query2=null;
		BooleanQuery query=null;
		query1=new TermQuery(new Term("name","word1"));
		query2=new TermQuery(new Term("name","word2"));
		query=new BooleanQuery();
		query.add(query1,BooleanClause.Occur.MUST);
		query.add(query2,BooleanClause.Occur.MUST_NOT);
 *  
 *5、PrefixQuery(使用前缀搜索)
 *
 *      Term pre1=new Term("name","wor");
		PrefixQuery query=null;
		query = new PrefixQuery(pre1);
 * 
 *6、PhraseQuery(短语搜索)
 *      
 *      a)默认坡度为0
		PhraseQuery query = new PhraseQuery();
		query.add(new Term(“bookname”,”钢”));
		query.add(new Term(“bookname”,”铁”));
		Hits hits=searcher.search(query); //搜索“钢铁”短语，而非“钢”和“铁”
		b)设置坡度，默认为0
		PhraseQuery query = new PhraseQuery();
		query.add(new Term(“bookname”,”钢”));
		query.add(new Term(“bookname”,”铁”));
		query.setSlop(1);
		Hits hits=searcher.search(query);//搜索“钢铁”或“钢*铁”中含一字
 * 
 *7、WildcardQuery(通配符搜索)
 * 
 *      * 表示0到多个字符
		? 表示一个单一的字符
		WildcardQuery query=new WildcardQuery(new Term(“content”,”?qq*”));
 * 
 *8、FuzzyQuery(模糊搜索)
 * 
 *      使用的算法为levenshtein算法，在比较两个字符串时，将动作分为3种：
				 加一个字母
				 删一个字母
				 改变一个字母
		FuzzyQuery query=new FuzzyQuery(new Term(“content”,”work”));

		public FuzzyQuery(Term term)
		public FuzzyQuery(Term term,float minimumSimilarity)throws IllegalArgumentException
		public FuzzyQuery(Term term,float minimumSimilarity,int prefixLength)throws IllegalArgumentException
		其中minimumSimilarity为最小相似度，越小则文档的数量越多。默认为0.5.其值必须<1.0
		FuzzyQuery query=new FuzzyQuery(new Term(“content”,”work”),0.1f);
		其中prefixLength表示要有多少个前缀字母必须完全匹配
		FuzzyQuery query=new FuzzyQuery(new Term(“content”,”work”),0.1f,1);
 *
 *9、RegexQuery(正则表达式的查询) 
 *
 *      String regex="http://[a-z]{1,3}\\.abc\\.com/.*";
		RegexQuery query=new RegexQuery(new Term("url",regex));

 * 
 *10、MultiPhraseQuery
 *
 *      a)
		MultiPhraseQuery query=new MultiPhraseQuery();
		//首先向其中加入要查找的短语的前缀
		query.add(new Term(“bookname”,”钢”));
		//构建3个Term，作为短语的后缀
		Term t1=new Term(“bookname”,”铁”);
		Term t2=new Term(“bookname”,”和”);
		Term t3=new Term(“bookname”,”要”);
		//再向query中加入所有的后缀，与前缀一起，它们将组成3个短语
		query.add(new Term[]{t1,t2,t3});
		Hits hits=searcher.search(query);
		for(int i=0;i<hits.length();i++)
			System.out.println(hits.doc(i));
		b)
		MultiPhraseQuery query=new MultiPhraseQuery();
		Term t1=new Term(“bookname”,”钢”);
		Term t2 = new Term(“bookname”,”和”);
		query.add(new Term[]{t1,t2});
		query.add(new Term(“bookname”,”铁”));
		c)
		MultiPhraseQuery query=new MultiPhraseQuery();
		Term t1=new Term(“bookname”,”钢”);
		Term t2 = new Term(“bookname”,”和”);
		query.add(new Term[]{t1,t2});
		query.add(new Term(“bookname”,”铁”));
		Term t3=new Term(“bookname”,”是”);
		Term t4=new Term(“bookname”,”战”);
		query.add(new Term[]{t3,t4});
 * 
	 * FuzzyQuery
	 * 
	 * PhraseQuery
 * 
 *11、 使用特定的分析器搜索
	 * QueryParser qp = new QueryParser(Lucene.Net.Util.Version.LUCENE_30,field, analyzer);//分词
		Query query = qp.Parse("月亮 星星"); //用空格空开
 *  qp.DefaultOperator = QueryParser.AND_OPERATOR;
	 * 
	 * 
	 * string[] fileds = { "title", "content" };//查询字段  
		QueryParser parser = null;// new QueryParser(Lucene.Net.Util.Version.LUCENE_30, field, analyzer);//一个字段查询  
		parser = new MultiFieldQueryParser(version, fileds, analyzer);//多个字段查询  
		Query query = parser.Parse(keyword);  
 *     qp.DefaultOperator = QueryParser.AND_OPERATOR;
 *     
 *  Query query = MultiFieldQueryParser.Parse("name*", new string[] { FieldName, FieldValue }, analyzer);
	IndexReader reader = IndexReader.Open(directory);
	IndexSearcher searcher = new IndexSearcher(reader);
	Hits hits = searcher.Search(query);
	 ***********
 * 
 *12、跨度搜索
 * 
 *      1.11.1.      SpanTermQuery
		效果和TermQuery相同
		SpanTermQuery query=new SpanTermQuery(new Term(“content”,”abc”));
 * 
		1.11.2.      SpanFirstQuery
		从Field内容的起始位置开始，在一个固定的宽度内查找所指定的词条
		SpanFirstQuery query=new SpanFirstQuery(new Term(“content”,”abc”),3);//是第3个word，不是byte
 * 
		1.11.3.      SpanNearQuery
		SpanNearQuery相当与PhaseQuery
		SpanTermQuery people=new SpanTermQuery(new Term(“content”,”mary”));
		SpanTermQuery how=new SpanTermQuery(new Term(“content”,”poor”));
		SpanNearQuery query=new SpanNearQuery(new SpanQuery[]{people,how},3,false);
 * 
		1.11.4.      SpanOrQuery
		把所有SpanQuery的结果合起来
		SpanTermQuery s1=new SpanTermQuery(new Term(“content”,”aa”);
		SpanTermQuery s2=new SpanTermQuery(new Term(“content”,”cc”);
		SpanTermQuery s3=new SpanTermQuery(new Term(“content”,”gg”);
		SpanTermQuery s4=new SpanTermQuery(new Term(“content”,”kk”);
		SpanNearQuery query1=new SpanNearQuery(new SpanQuery[]{s1,s2},1,false);
		SpanNearQuery query2=new SpanNearQuery(new SpanQuery[]{s3,s4},3,false);
		SpanOrQuery query=new SpanOrQuery(new SpanQuery[]{query1,query2});
 * 
		1.11.5.      SpanNotQuery
		从第1个SpanQuery的查询结果中，去掉第2个SpanQuery的查询结果
		SpanTermQuery s1=new SpanTermQuery(new Term(“content”,”aa”);
		SpanFirstQuery query1=new SpanFirstQuery(s1,3);

		SpanTermQuery s3=new SpanTermQuery(new Term(“content”,”gg”);
		SpanTermQuery s4=new SpanTermQuery(new Term(“content”,”kk”);
		SpanNearQuery query2=new SpanNearQuery(new SpanQuery[]{s3,s4},4,false);

		SpanNotQuery query=new SpanNotQuery(query1,query2);
 * 
 * 
 * 13、过滤
 * 
 *  Filter filter = null;
	//使用TermRangeFilter进行范围过滤搜索
	//1.域   2.起始位置  3.结束位置   4.是否包含起始位置    5.是否包含结束位置   
	filter = new TermRangeFilter("time", "2015-01-01", "2015-01-02", true, true);

	//使用NumericRangeFilter进行过滤
	filter = NumericRangeFilter.NewIntRange("size", 10, 5000, true, true);

	//使用QueryWrapperFilter进行过滤
	filter = new QueryWrapperFilter(new WildcardQuery(new Term("filename", "*.ini")));

	Query query = new MatchAllDocsQuery();

	Query newquery= new FilteredQuery(query, filter);
 * ***************************/


/************
	其它操作
 * 
 * 
 *      2. 多字段搜索 
		使用 MultiFieldQueryParser 可以指定多个搜索字段。
		Query query = MultiFieldQueryParser.Parse("name*", new string[] { FieldName, FieldValue }, analyzer);
		IndexReader reader = IndexReader.Open(directory);
		IndexSearcher searcher = new IndexSearcher(reader);
		Hits hits = searcher.Search(query); 
 * 
 * 
		3. 多条件搜索 
		除了使用 QueryParser.Parse 分解复杂的搜索语法外，还可以通过组合多个 Query 来达到目的。
		Query query1 = new TermQuery(new Term(FieldValue, "name1")); // 词语搜索
		Query query2 = new WildcardQuery(new Term(FieldName, "name*")); // 通配符
		//Query query3 = new PrefixQuery(new Term(FieldName, "name1")); // 字段搜索 Field:Keyword，自动在结尾添加 *
		//Query query4 = new RangeQuery(new Term(FieldNumber, NumberTools.LongToString(11L)), new Term(FieldNumber, NumberTools.LongToString(13L)), true); // 范围搜索
		//Query query5 = new FilteredQuery(query, filter); // 带过滤条件的搜索
		BooleanQuery query = new BooleanQuery();
		query.Add(query1, BooleanClause.Occur.MUST);
		query.Add(query2, BooleanClause.Occur.MUST);

		IndexSearcher searcher = new IndexSearcher(reader);
		Hits hits = searcher.Search(query); 
 * 
 * 
 *      4. 设置权重
		可以给 Document 和 Field 增加权重(Boost)，使其在搜索结果排名更加靠前。缺省情况下，搜索结果以 Document.Score 作为排序依据，该数值越大排名越靠前。Boost 缺省值为 1。

		Score = Score * Boost

		通过上面的公式，我们就可以设置不同的权重来影响排名。

		如下面的例子中根据 VIP 级别设定不同的权重。

		Document document = new Document();
		switch (vip)
		{
		  case VIP.Gold: document.SetBoost(2F); break;
		  case VIP.Argentine: document.SetBoost(1.5F); break;
		}

		只要 Boost 足够大，那么就可以让某个命中结果永远排第一位，这就是百度等网站的"收费排名"业务。

		5. 排序

		通过 SortField 的构造参数，我们可以设置排序字段，排序条件，以及倒排。

		Sort sort = new Sort(new SortField(FieldName, SortField.DOC, false));

		IndexSearcher searcher = new IndexSearcher(reader);
		Hits hits = searcher.Search(query, sort);

		排序对搜索速度影响还是很大的，尽可能不要使用多个排序条件。

		6. 过滤

		使用 Filter 对搜索结果进行过滤，可以获得更小范围内更精确的结果。

		举个例子，我们搜索上架时间在 2005-10-1 到 2005-10-30 之间的商品。
		对于日期时间，我们需要转换一下才能添加到索引库，同时还必须是索引字段。

		// index
		document.Add(FieldDate, DateField.DateToString(date), Field.Store.YES, Field.Index.UN_TOKENIZED);

		//...

		// search
		Filter filter = new DateFilter(FieldDate, DateTime.Parse("2005-10-1"), DateTime.Parse("2005-10-30"));
		Hits hits = searcher.Search(query, filter);

		除了日期时间，还可以使用整数。比如搜索价格在 100 ~ 200 之间的商品。
		Lucene.Net NumberTools 对于数字进行了补位处理，如果需要使用浮点数可以自己参考源码进行。

		// index
		document.Add(new Field(FieldNumber, NumberTools.LongToString((long)price), Field.Store.YES, Field.Index.UN_TOKENIZED));

		//...

		// search
		Filter filter = new RangeFilter(FieldNumber, NumberTools.LongToString(100L), NumberTools.LongToString(200L), true, true);
		Hits hits = searcher.Search(query, filter);

		使用 Query 作为过滤条件。

		QueryFilter filter = new QueryFilter(QueryParser.Parse("name2", FieldValue, analyzer));

		我们还可以使用 FilteredQuery 进行多条件过滤。

		Filter filter = new DateFilter(FieldDate, DateTime.Parse("2005-10-10"), DateTime.Parse("2005-10-15"));
		Filter filter2 = new RangeFilter(FieldNumber, NumberTools.LongToString(11L), NumberTools.LongToString(13L), true, true);

		Query query = QueryParser.Parse("name*", FieldName, analyzer);
		query = new FilteredQuery(query, filter);
		query = new FilteredQuery(query, filter2);

		IndexSearcher searcher = new IndexSearcher(reader);
		Hits hits = searcher.Search(query);

		7. 分布搜索

		我们可以使用 MultiReader 或 MultiSearcher 搜索多个索引库。

		MultiReader reader = new MultiReader(new IndexReader[] { IndexReader.Open(@"c:\index"), IndexReader.Open(@"\\server\index") });
		IndexSearcher searcher = new IndexSearcher(reader);
		Hits hits = searcher.Search(query);

		或

		IndexSearcher searcher1 = new IndexSearcher(reader1);
		IndexSearcher searcher2 = new IndexSearcher(reader2);
		MultiSearcher searcher = new MultiSearcher(new Searchable[] { searcher1, searcher2 });
		Hits hits = searcher.Search(query);

		还可以使用 ParallelMultiSearcher 进行多线程并行搜索。

		8. 合并索引库

		将 directory1 合并到 directory2 中。

		Directory directory1 = FSDirectory.GetDirectory("index1", false);
		Directory directory2 = FSDirectory.GetDirectory("index2", false);

		IndexWriter writer = new IndexWriter(directory2, analyzer, false);
		writer.AddIndexes(new Directory[] { directory });
		Console.WriteLine(writer.DocCount());
		writer.Close();

		9. 显示搜索语法字符串

		我们组合了很多种搜索条件，或许想看看与其对等的搜索语法串是什么样的。

		BooleanQuery query = new BooleanQuery();
		query.Add(query1, true, false);
		query.Add(query2, true, false);
		//...

		Console.WriteLine("Syntax: {0}", query.ToString());

		输出：
		Syntax: +(name:name* value:name*) +number:[0000000000000000b TO 0000000000000000d]

		呵呵，就这么简单。

		10. 操作索引库

		删除 (软删除，仅添加了删除标记。调用 IndexWriter.Optimize() 后真正删除。)

		IndexReader reader = IndexReader.Open(directory);

		// 删除指定序号(DocId)的 Document。
		reader.Delete(123);

		// 删除包含指定 Term 的 Document。
		reader.Delete(new Term(FieldValue, "Hello"));

		// 恢复软删除。
		reader.UndeleteAll();

		reader.Close();

		增量更新 (只需将 create 参数设为 false，即可往现有索引库添加新数据。)

		Directory directory = FSDirectory.GetDirectory("index", false);
		IndexWriter writer = new IndexWriter(directory, analyzer, false);
		writer.AddDocument(doc1);
		writer.AddDocument(doc2);
		writer.Optimize();
		writer.Close();

		11. 优化

		批量向 FSDirectory 增加索引时，增大合并因子(mergeFactor )和最小文档合并数(minMergeDocs)有助于提高性能，减少索引时间。

		IndexWriter writer = new IndexWriter(directory, analyzer, true);

		writer.maxFieldLength = 1000; // 字段最大长度
		writer.mergeFactor = 1000;
		writer.minMergeDocs = 1000;

		for (int i = 0; i < 10000; i++)
		{
		  // Add Documentes...
		}

		writer.Optimize();
		writer.Close();

 */